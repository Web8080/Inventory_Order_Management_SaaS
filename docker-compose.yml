version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: inventory_saas
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_saas"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for events and time-series data
  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_pass
      MONGO_INITDB_DATABASE: inventory_saas
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=inventory_saas
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_pass
      - MONGODB_URL=mongodb://admin:admin_pass@mongodb:27017/inventory_saas?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=inventory_saas
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_pass
      - MONGODB_URL=mongodb://admin:admin_pass@mongodb:27017/inventory_saas?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_media:/app/media
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A inventory_saas worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=inventory_saas
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_pass
      - MONGODB_URL=mongodb://admin:admin_pass@mongodb:27017/inventory_saas?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A inventory_saas beat --loglevel=info

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm start

  # ML Service
  ml-service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    environment:
      - MONGODB_URL=mongodb://admin:admin_pass@mongodb:27017/inventory_saas?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./ml:/app
      - ml_models:/app/models
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  backend_media:
  backend_static:
  ml_models:
